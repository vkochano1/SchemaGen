[[[cog
import renderers.message
import renderers.namespace
import renderers.common
from model.common import *

commonRenderer = renderers.common.Renderer(model, config)
msgRenderer = renderers.payload.Renderer(model,payload)
nsRenderer = renderers.namespace.Renderer(model,payload.namespace())

]]]
[[[end]]]
#pragma once

[[[cog
includesForContainerBased="""#include <Lib/Types.h>
#include <Lib/FieldTraits.h>
#include <Lib/FieldOp/Clear.h>
#include <Lib/FieldOp/IsEmpty.h>
#include <Lib/FieldOp/Dump.h>
#include <Lib/TypeTraits.h>
#include <Lib/ContainerOp.h>
#include <array>

#include <brigand/sequences/set.hpp>
#include <brigand/sequences/append.hpp>
#include <brigand/sequences/contains.hpp>
#include <brigand/algorithms/all.hpp>
"""
if payload.baseMessage == None:
  cog.outl(includesForContainerBased, dedent = True)

cog.outl(msgRenderer.generateIncludes())
cog.outl(nsRenderer.generateNamespaceBegin())

payloadSize = payload.payloadSize
tmp = payload.baseMessage
while tmp != None:
  payloadSize = payloadSize + tmp.payloadSize
  tmp = tmp.baseMessage
]]]
[[[end]]]

#pragma pack(push)
#pragma pack (1)

[[[cog
  cog.outl("class {name} :  public {basename}".format(name = payload.className,basename= msgRenderer.genBaseClass()))
]]]
[[[end]]]
{
public:
  [[[cog
    cog.outl("typedef {basename} Base;".format(basename = msgRenderer.genBaseClass()))
    cog.outl("enum {{ TAG = {tagVal} }};".format(tagVal = commonRenderer.genTagVal(payload)))
  ]]]
  [[[end]]]

  [[[cog
  cog.outl(commonRenderer.generateRevision())
  ]]]
  [[[end]]]

  using ShortName_t = Lib::string_t
  <
   [[[cog
      cog.outl(commonRenderer.genCharList(payload.name))
   ]]]
   [[[end]]]
  >;
  using Name_t = Lib::string_t
  <
  [[[cog
     cog.outl(commonRenderer.genCharList(payload.fullName))
  ]]]
  [[[end]]]
  >;

  using Namespace_t = Lib::string_t
  <
  [[[cog
     cog.outl(commonRenderer.genCharList(payload.namespace().fullName))
  ]]]
  [[[end]]]
  >;

  static constexpr boost::int32_t tag     () { return TAG; }
  static constexpr const char * name      () { return Name_t::c_str(); }
  static constexpr const char * shortName () { return ShortName_t::c_str(); }

  [[[cog
    constValsForBase = []
    attrByName = dict ( (attr.name, attr ) for attr in payload.attributes )

    if payload.baseMessage != None:
      for baseProp in payload.baseMessage.props:
          attr = attrByName.get(baseProp.name)
          if attr != None:
            propType = baseProp.propDataType().fullName
            if baseProp.propDataType().propDataCategory() == PropDataCategory.Enumeration and attr.constValue.find(propType) != 0:
              constValsForBase.append( propType + "::" + attr.constValue)
            else:
              constValsForBase.append( attr.constValue)

    pattern = """{name} () : Base({initList})
    {{
    }}
    """.format(name = payload.name, initList = ",".join(constValsForBase))
    cog.outl(pattern, dedent = True)
  ]]]
  [[[end]]]

  [[[cog
    pattern = """
    {name} (const {name} & payload)
      : Base(payload)
    {{
      *this = payload;
    }}

    {name}& operator = (const {name} & payload)
    {{
      using Bytes = std::array<char, sizeof({name})>;
      reinterpret_cast<Bytes&>(*this) = reinterpret_cast<const Bytes&> (payload);
      return *this;
    }}"""
    cog.outl(pattern.format(name=payload.name), dedent = True)
  ]]]
  [[[end]]]

  using ThisFieldSet = brigand::set
  <
    [[[cog
      cog.outl(",\n".join([msgRenderer.genPropType(prop) for prop in payload.props]))
    ]]]
    [[[end]]]
  >;

  using FieldSet_t = brigand::as_set<brigand::append<Base::FieldSet_t, ThisFieldSet> >;
  using Fields     = FieldSet_t;


  [[[cog
      cog.outl("""using TypeDescriptor = Lib::TypeDescriptor
      <
      {type}, Base, Lib::PayloadType, true,
      Base::TypeDescriptor::IsSafeToClone && brigand::all<ThisFieldSet, Lib::Traits::is_safe_to_clone<brigand::_1> >::value
      >;""".format(type=payload.className), dedent = True)
  ]]]
  [[[end]]]

  template<typename FIELD>
  decltype(auto) get() const noexcept
  {
    return get_(Lib::Identity<FIELD> () );
  }

  template<typename FIELD>
  decltype(auto) get() noexcept
  {
    return get_(Lib::Identity<FIELD> () );
  }

  template<typename FIELD>
  void get(FIELD & field) const
  {
    field = get_(Lib::Identity<FIELD>());
  }

  template<typename FIELD>
  static constexpr bool required(const FIELD&) { return required_(Lib::Identity<FIELD>());}

  template<typename FIELD>
  static constexpr bool required() { return required_(Lib::Identity<FIELD>());}

  [[[cog
    pattern = """
    /*****************************************************************************
      Setters and getters for {name}

    ******************************************************************************/

    const {typeName}& get{name} () const noexcept {{ return _{name}; }}
          {typeName}& get{name} ()       noexcept {{ return _{name}; }}

    using {name}Type = {typeName};

    void set(const {typeName} & field) {{_{name} = field;}}
    void set{name}(const {typeName} & field) {{_{name} = field;}}
    """;

    for prop in payload.props:
      cog.outl(pattern.format(name=prop.name, typeName=msgRenderer.genPropType(prop) ))
  ]]]
  [[[end]]]

  template<typename F, typename ...ARGS>
  bool for_each( F && f, ARGS && ...args )
  {
    if (! Base::for_each(std::forward<F> (f), std::forward<ARGS>(args)...) )
    return false;

    [[[cog
      pattern = "if( !f (%s, std::forward<ARGS>(args)...) ) return false;\n" * len(payload.props)
      cog.outl(msgRenderer.applyMemberNamesToString(pattern))
    ]]]
    [[[end]]]
    return true;
  }

  template<typename F, typename ...ARGS>
  bool for_each( F && f, ARGS && ...args ) const
  {
    if (! Base::for_each(std::forward<F> (f), std::forward<ARGS>(args)...) )
    return false;

    [[[cog
      pattern = "if( !f (%s, std::forward<ARGS>(args)...) ) return false;\n" * len(payload.props)
      cog.outl(msgRenderer.applyMemberNamesToString(pattern))
    ]]]
    [[[end]]]
    return true;
  }

  static constexpr size_t countAllFields ()
  {
    [[[cog
      cog.outl("return Base::countAllFields() + {count};".format(count=payload.countFields()))
    ]]]
    [[[end]]]
  }

  void clear ()
  {
    Base::clear ();
    [[[cog
      for prop in payload.props:
        cog.outl("_{name}.clear();".format(name=prop.name))
    ]]]
    [[[end]]]
  }

  [[[cog
  cog.outl("friend std::ostream& operator << (std::ostream& os, const {name}& value )".format(name = payload.className))
  ]]]
  [[[end]]]
  {
    Lib::FieldOp::Dump dumper(os);
    dumper(value);
    return os;
  }

protected:
  using Base::get_;
  using Base::required_;

  [[[cog
    pattern = """
    {typeName} & get_(Lib::Identity<{typeName}>) noexcept {{ return _{name}; }}
    {typeName} & get_(const Lib::Identity<{typeName}::ShortName_t>&) noexcept {{ return _{name}; }}

    const {typeName} & get_(Lib::Identity<{typeName}>) const noexcept {{ return _{name}; }}
    const {typeName} & get_(const Lib::Identity<{typeName}::ShortName_t>&) const noexcept {{ return _{name}; }}

    static constexpr bool required_(Lib::Identity<{typeName}>)       noexcept {{ return  {isReq}; }}
    """
    for prop in payload.props:
      cog.outl(pattern.format(name=prop.name, typeName=msgRenderer.genPropType(prop), isReq = "true" if prop.required() else "false" ))
    ]]]
    [[[end]]]

    [[[cog
    for prop in payload.props:
      propName = msgRenderer.genRightPaddedName(msgRenderer.genPropType(prop))
      cog.outl("{prop_padded} _{prop};".format(prop_padded = propName ,prop=prop.propDataType().name))
    ]]]
    [[[end]]]
};

[[[cog
pattern = """
static_assert
(   sizeof({name}) == {payloadSize}
  , "Size of {name} is not {payloadSize}!!!"
);"""
cog.outl(pattern.format(name=payload.name, payloadSize = payloadSize))
]]]
[[[end]]]

#pragma pack (pop)

[[[cog
cog.outl(nsRenderer.generateNamespaceEnd())
]]]
[[[end]]]
