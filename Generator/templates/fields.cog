#pragma once

[[[cog
import renderers.namespace
import renderers.common
import renderers.field

assert len(fields) > 0
namespace = fields[0].namespace()
commonRenderer = renderers.common.Renderer(model, config)
nsRenderer = renderers.namespace.Renderer(model, namespace)

tags = [field.tag for field in fields]
minTag = min(tags)
maxTag = max(tags)

cog.outl(commonRenderer.genIncludes("Fields", fields))
cog.outl(nsRenderer.generateNamespaceBegin())
]]]
[[[end]]]

class Fields
{
public:
  [[[cog
  cog.out(commonRenderer.generateRevision())
  ]]]
  [[[end]]]
  [[[cog
    cog.out("enum {{ MIN_TAG = {minTag}, MAX_TAG = {maxTag}  }};".format(minTag = str(minTag), maxTag = str(maxTag)))
  ]]]
  [[[end]]]

  using FieldSet = brigand::set
  <
    [[[cog
      cog.outl(",\n".join([field.className for field in fields]))
    ]]]
    [[[end]]]
  >;

  template<typename F, typename ...ARGS>
  bool bind(boost::int32_t tag, F && f, ARGS && ...args)
  {
    switch (tag)
    {
      [[[cog
      for field in fields:
        text = "case {type}::TAG: f.TEMPLATE_OPERATOR({type}) (std::forward(args)...); return true; break;" .format( type = field.className )
        cog.outl(text)
      ]]]
      [[[end]]]

      default:
      break;
    }

    return false;
  }

  template<typename F, typename ...ARGS>
  bool bind(const char* name, F && f, ARGS && ...args)
  {
    using Lib::detail::string_hash;
    size_t nameLength = 0;
    auto hashValue = string_hash(0, name, &nameLength);
    switch (hashValue)
    {
      [[[cog
      patternToLower ="""case string_hash(0, {type}::ShortName_t::to_lower().c_str()):
                            if (!{type}::ShortName_t::to_lower().equal(name,nameLength))
                              break;
                            f.TEMPLATE_OPERATOR({type}) (std::forward(args)...); return true; break;"""

      patternRegular ="""case string_hash(0, {type}::ShortName_t::c_str()):
                            if (!{type}::ShortName_t::equal(name,nameLength))
                              break;
                            f.TEMPLATE_OPERATOR({type}) (std::forward(args)...); return true; break;"""

      longNameToLower="""case string_hash(0, {type}::Name_t::to_lower().c_str()):
                            if (!{type}::Name_t::to_lower().equal(name,nameLength))
                              break;
                            f.TEMPLATE_OPERATOR({type}) (std::forward(args)...); return true; break;"""

      longNameRegular ="""case string_hash(0, {type}::Name_t::c_str()):
                            if (!{type}::Name_t::equal(name,nameLength))
                              break;
                            f.TEMPLATE_OPERATOR({type}) (std::forward(args)...); return true; break;"""

      for field in fields:
        shortName = field.name
        longName = field.fullName
        propType = field.className

        if longName.lower() != longName:
          cog.outl(longNameToLower.format(type=propType, name=field.name))

        cog.outl(longNameRegular.format(type=propType, name=field.name))

        if shortName.lower() != shortName:
          cog.outl(patternToLower.format(type=propType, name=field.name))

        cog.outl(patternRegular.format(type=propType, name=field.name))

    ]]]
    [[[end]]]

    default:
    break;
  }

  return false;
}

template<typename F, typename ...ARGS>
bool for_each( F && f, ARGS && ...args )
{
  [[[cog
    for field in fields:

      cog.outl("if( !f.TEMPLATE_OPERATOR({type}) ( std::forward(args)...) ) return false;".format(type = field.className))
  ]]]
  [[[end]]]
  return true;
}

};

[[[cog
cog.outl(nsRenderer.generateNamespaceEnd())
]]]
[[[end]]]
