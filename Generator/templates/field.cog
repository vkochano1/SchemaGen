#pragma once

[[[cog

import renderers.namespace
import renderers.common
import renderers.field

commonRenderer = renderers.common.Renderer(model, config)
nsRenderer = renderers.namespace.Renderer(model, field.namespace)
fieldRenderer = renderers.field.Renderer(model, field)

cog.outl(fieldRenderer.generateEnumIncludes())
cog.outl(nsRenderer.generateNamespaceBegin())

]]]
[[[end]]]
[[[cog
dataType = field.dataType
baseSimpleType = "" if dataType.isSimpleType else "Lib::SimpleType"

cog.outl("class {name} : public {dataType} {additionalBases} ".format(
          name = field.className
          , dataType = fieldRenderer.dataTypeName
          ,additionalBases = fieldRenderer.genAdditionalBaseClasses() ))
]]]
[[[end]]]
{
public:

    [[[cog
     cog.outl("using Base = {dataType};".format(dataType = fieldRenderer.dataTypeName))
    ]]]
    [[[end]]]

    [[[cog
      cog.outl("enum {{ TAG = {tagVal} }};".format(tagVal = str(field.tag)))
    ]]]
    [[[end]]]

    [[[cog
    cog.outl(commonRenderer.generateRevision())
    ]]]
    [[[end]]]

    using TypeDescriptor = Lib::TypeDescriptor
    <
    [[[cog
     cog.outl("{name}, {dataType}, Lib::SimpleType, true, true".format(name = field.className, dataType=dataType.fullName))
    ]]]
    [[[end]]]
    >;

    using ShortName_t = Lib::string_t
    <
     [[[cog
        name = field.displayName if field.displayName else field.name
        cog.outl(commonRenderer.genCharList(name))
     ]]]
     [[[end]]]
    >;

    using Name_t = Lib::string_t
    <
    [[[cog
       cog.outl(commonRenderer.genCharList(field.fullName))
    ]]]
    [[[end]]]
    >;

    using Namespace_t = Lib::string_t
    <
    [[[cog
       cog.outl(commonRenderer.genCharList(field.namespace.fullName))
    ]]]
    [[[end]]]
    >;

    static constexpr boost::int32_t tag () {return TAG;}
    constexpr const char * name      () { return Name_t::c_str(); }
    constexpr const char * shortName () { return ShortName_t::c_str(); }

    [[[cog
    cog.outl("{name} () {{}}".format(name=field.className))
    ]]]
    [[[end]]]

    [[[cog
    if dataType.isString:
      cog.outl("""
      {name} (const Lib::String& value): {dataType} (value) {{}}
      {name} (const std::string& value): {dataType} (value) {{}}
      {name} (const char* value): {dataType} (value) {{}}
      {name} (const char* value, size_t length): {dataType} (value,length) {{}}

      using {dataType}::operator=;

      """.format(name=field.className, dataType=dataType.fullName), dedent = True)
    elif dataType.isBoolean:
      cog.outl("""
      {name} (bool value): {dataType} (value) {{}}
      """.format(name=field.className, dataType=dataType.fullName), dedent = True)
    elif dataType.enumeration:
      cog.outl("""
      {name} ({dataType}::Enumeration value): {dataType} (value) {{}}
      {name}& operator =  ({dataType}::Enumeration value)
      {{
        {dataType}::operator = (value);
        return *this;
      }}
      """.format(name=field.className, dataType=dataType.fullName), dedent = True)
    else:
      cog.outl("""
      {name} (const {dataType} & value): {dataType} (value) {{}}
      """.format(name=field.className, dataType=dataType.fullName), dedent = True)
    ]]]
    [[[end]]]
    [[[cog
    cog.outl("""
      {name}& operator = (const {dataType} & value)
      {{
        {dataType}::operator = (value);
        return *this;
      }}
    """.format(name = field.className, dataType = dataType.fullName), dedent = True)
    ]]]
    [[[end]]]

    [[[cog
    cog.outl("friend std::ostream& operator << (std::ostream& os, const {name}& field )".format(name = field.className))
    ]]]
    [[[end]]]
    {
      Lib::FieldOp::Dump dumper(os);
      dumper(field);

      return os;
    }
};

[[[cog
cog.outl(nsRenderer.generateNamespaceEnd())
]]]
[[[end]]]
